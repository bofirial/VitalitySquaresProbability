{"version":3,"sources":["probabilityDisplayService.js","probabilityDisplayService.ts"],"names":["__decorate","this","decorators","target","key","desc","Reflect","decorate","arguments","length","reduceRight","o","d","__metadata","k","v","metadata","angular2_1","require","vitalitySquaresSettingsService_1","probabilityCalculationService_1","Outcome","exports","ProbabilityDisplayStatistics","ProbabilityDisplayService","ProbabilityDisplayService.constructor","ProbabilityDisplayService.getProbabilityOfNextSquare","ProbabilityDisplayService.getExactProbabilityOfOutcome","ProbabilityDisplayService.getAtLeastProbabilityOfOutcome","ProbabilityDisplayService.getProbabilityDisplayStatistics","VitalitySquaresSettingsService","ProbabilityCalculationService"],"mappings":"AACA,GAAIA,YAAcC,MAAQA,KAAKD,YAAe,SAAUE,EAAYC,EAAQC,EAAKC,GAC7E,GAAuB,gBAAZC,UAAoD,kBAArBA,SAAQC,SAAyB,MAAOD,SAAQC,SAASL,EAAYC,EAAQC,EAAKC,EAC5H,QAAQG,UAAUC,QACd,IAAK,GAAG,MAAOP,GAAWQ,YAAY,SAASC,EAAGC,GAAK,MAAQA,IAAKA,EAAED,IAAOA,GAAMR,EACnF,KAAK,GAAG,MAAOD,GAAWQ,YAAY,SAASC,EAAGC,GAAK,YAAQA,GAAKA,EAAET,EAAQC,KAAkB,OAChG,KAAK,GAAG,MAAOF,GAAWQ,YAAY,SAASC,EAAGC,GAAK,MAAQA,IAAKA,EAAET,EAAQC,EAAKO,IAAOA,GAAMN,KAGpGQ,WAAcZ,MAAQA,KAAKY,YAAe,SAAUC,EAAGC,GACvD,MAAuB,gBAAZT,UAAoD,kBAArBA,SAAQU,SAAgCV,QAAQU,SAASF,EAAGC,GAAtG,QCRJE,WAAAC,QAAyB,qBAEzBC,iCAAAD,QAA0F,oCAC1FE,gCAAAF,QAA4C,mCAE5CG,QAAA,WAAAA,QAAAA,MAIAA,MAAAA,KAJaC,SAAAD,QAAOA,OAMpB,IAAAE,8BAAA,WAAAA,QAAAA,MAIAA,MAAAA,KAJaD,SAAAC,6BAA4BA,4BAMzC,IAAAC,2BAAA,WAGIA,QAAAA,GAAYA,EAAgEA,GACxEC,KAAKA,+BAAiCA,EACtCA,KAAKA,wBAA0BA,EAA+BA,cAC9DA,KAAKA,8BAAgCA,EA6D7CD,MAtDYA,GAAAA,UAAAA,2BAARA,SAAmCA,GAE/BE,MAAOA,GAAmBA,UAAYA,KAAKA,+BAA+BA,0BAGtEF,EAAAA,UAAAA,6BAARA,SAAqCA,EAAwCA,EAAiBA,EAA6BA,GAEvHG,GAAIA,GAAqBA,GAAWA,EAAmBA,MAAQA,EAAmBA,UAElFA,OAAyBA,GAArBA,EACOA,EAGJA,KAAKA,8BAA8BA,0BAA0BA,EAAqBA,EAAmBA,UAAWA,EAAqBA,IAGxIH,EAAAA,UAAAA,+BAARA,SAAuCA,EAAwCA,EAAiBA,EAA6BA,GAIzHI,IAAKA,GAFDA,GAAQA,EAEHA,EAAIA,EAASA,GAAKA,EAAmBA,MAAOA,IACjDA,GAASA,KAAKA,6BAA6BA,EAAoBA,EAAGA,EAAqBA,EAG3FA,OADAA,SAAQA,IAAIA,IACLA,GAGXJ,EAAAA,UAAAA,gCAAAA,WAKIK,IAA+BA,GAH3BA,GAA+BA,GAAIA,OACnCA,EAAsBA,KAAKA,+BAA+BA,yBAE/BA,EAAAA,EAAAA,EAAAA,KAAKA,wBAAwBA,UAAvDA,EAAAA,EAAAA,OAAAA,IAAiEA,CAOlEA,IAAKA,GAPAA,GAAkBA,EAAAA,GACnBA,GACAA,WAAYA,EAAmBA,KAC/BA,wBAAyBA,KAAKA,2BAA2BA,GACzDA,aAGKA,EAAIA,EAAGA,EAAIA,EAAmBA,MAAQA,EAAGA,IAC9CA,EAAsBA,SAASA,MAC3BA,WAAYA,EACZA,iBAAkBA,KAAKA,6BAA6BA,EAAoBA,EAAGA,EAAqBA,KAAKA,wBAAwBA,qBAC7HA,mBAAoBA,KAAKA,+BAA+BA,EAAoBA,EAAGA,EAAqBA,KAAKA,wBAAwBA,sBAIzIA,GAA6BA,KAAKA,GAGtCA,MAAOA,IA/DfL,EAAAA,YAACA,WAAAA,aDuDOX,WAAW,qBAAsBM,iCAAiCW,+BAAgCV,gCAAgCW,iCACnIP,KCvDMF,SAAAE,0BAAyBA","file":"probabilityDisplayService.js","sourcesContent":[null,"/// <reference path=\"./../../node_modules/angular2/angular2.d.ts\" />\r\n\r\nimport {Injectable} from 'angular2/angular2';\r\n\r\nimport {VitalitySquaresSettingsService, VitalitySquaresSettings, VitalitySquareItem} from './vitalitySquaresSettingsService';\r\nimport {ProbabilityCalculationService} from './probabilityCalculationService';\r\n\r\nexport class Outcome {\r\n    numSquares: number;\r\n    exactProbability: number;\r\n    atLeastProbability: number;\r\n}\r\n\r\nexport class ProbabilityDisplayStatistics {\r\n    squareType: string;\r\n    probabilityOfNextSquare: number;\r\n    outcomes: Array<Outcome>;\r\n}\r\n\r\n@Injectable()\r\nexport class ProbabilityDisplayService {\r\n\r\n    constructor(vitalitySquaresSettingsService: VitalitySquaresSettingsService, probabilityCalculationService: ProbabilityCalculationService ) {\r\n        this.vitalitySquaresSettingsService = vitalitySquaresSettingsService;\r\n        this.vitalitySquaresSettings = vitalitySquaresSettingsService.getSettings();\r\n        this.probabilityCalculationService = probabilityCalculationService;\r\n    }\r\n\r\n    vitalitySquaresSettings: VitalitySquaresSettings;\r\n    vitalitySquaresSettingsService: VitalitySquaresSettingsService;\r\n    probabilityCalculationService: ProbabilityCalculationService;\r\n\r\n    private getProbabilityOfNextSquare(vitalitySquareItem: VitalitySquareItem): number {\r\n        \r\n        return vitalitySquareItem.remaining / this.vitalitySquaresSettingsService.getTotalRemainingItems();\r\n    }\r\n\r\n    private getExactProbabilityOfOutcome(vitalitySquareItem: VitalitySquareItem, outcome: number, totalRemainingItems: number, remainingSelections: number): number {\r\n        \r\n        var requiredSelections = outcome - (vitalitySquareItem.total - vitalitySquareItem.remaining);\r\n\r\n        if (requiredSelections < 0) {\r\n            return 0;\r\n        }\r\n\r\n        return this.probabilityCalculationService.hypergeometricProbability(totalRemainingItems, vitalitySquareItem.remaining, remainingSelections, requiredSelections);\r\n    }\r\n\r\n    private getAtLeastProbabilityOfOutcome(vitalitySquareItem: VitalitySquareItem, outcome: number, totalRemainingItems: number, remainingSelections: number): number {\r\n        \r\n        var total = 0;\r\n\r\n        for (var i = outcome; i <= vitalitySquareItem.total; i++) {\r\n            total += this.getExactProbabilityOfOutcome(vitalitySquareItem, i, totalRemainingItems, remainingSelections);\r\n        }\r\n        console.log(\"\");\r\n        return total;\r\n    }\r\n\r\n    getProbabilityDisplayStatistics(): Array<ProbabilityDisplayStatistics> {\r\n\r\n        let probabilityDisplayStatistics = new Array<ProbabilityDisplayStatistics>();\r\n        var totalRemainingItems = this.vitalitySquaresSettingsService.getTotalRemainingItems();\r\n\r\n        for (var vitalitySquareItem of this.vitalitySquaresSettings.gridItems) {\r\n            var currentItemStatistics = {\r\n                squareType: vitalitySquareItem.name,\r\n                probabilityOfNextSquare: this.getProbabilityOfNextSquare(vitalitySquareItem),\r\n                outcomes: []\r\n            };\r\n\r\n            for (var i = 0; i < vitalitySquareItem.total + 1; i++) {\r\n                currentItemStatistics.outcomes.push({\r\n                    numSquares: i,\r\n                    exactProbability: this.getExactProbabilityOfOutcome(vitalitySquareItem, i, totalRemainingItems, this.vitalitySquaresSettings.remainingSelections),\r\n                    atLeastProbability: this.getAtLeastProbabilityOfOutcome(vitalitySquareItem, i, totalRemainingItems, this.vitalitySquaresSettings.remainingSelections)\r\n                });\r\n            }\r\n\r\n            probabilityDisplayStatistics.push(currentItemStatistics);\r\n        }\r\n\r\n        return probabilityDisplayStatistics;\r\n        \r\n    }\r\n\r\n}"],"sourceRoot":"/source/"}